import React, { Component } from 'react';
import { Modal, Text, View, Alert, StyleSheet, Icon, TextInput, TouchableOpacity, Button, FlatList, AsyncStorage, DatePickerAndroid } from 'react-native';

//const isAndroid = Platform.OS == "android";

export default class ModalExample extends Component {
  constructor() {
    super();
    this.state = {
      modalVisible: false,
      tasks: [{
        task: "",
        date: this.todayDate(),
      }]
    };
    this.showDatePicker.bind(this);
  }
  todayDate() {
    var today = new Date();
    var dd = today.getDate();
    var mm = today.getMonth() + 1; //January is 0!

    var yyyy = today.getFullYear();
    if (dd < 10) {
      dd = '0' + dd;
    }
    if (mm < 10) {
      mm = '0' + mm;
    }
    return (dd + '/' + mm + '/' + yyyy);
  }
  setModalVisible(visible) {
    this.setState({ modalVisible: visible });
  }

  changeDateHandler = date => {
    this.setState({ date: date });
  };

  changeTextHandler = task => {
    this.setState({ task: task });
  };

  addTask = () => {
    let notEmptyDate = this.state.date.trim().length > 0;
    let notEmptyText = this.state.task.trim().length > 0;

    if (notEmptyDate && notEmptyText) {
      let tasks = this.state.tasks;
      tasks.push({
        task: this.state.task,
        date: this.state.date,
      });
      this.setState({ tasks: tasks });
      AsyncStorage.setItem("TASKS", tasks);
      // this.setState(
      //   prevState => {
      //     let { tasks, text, date } = prevState;
      //     return {
      //       tasks: tasks.concat({ key: tasks.length, text: text, date: date }),
      //       text: "",
      //       date: ""
      //     };
      //   },
      //   () => Tasks.save(this.state.tasks)
      // );
    }
    this.setModalVisible(!this.state.modalVisible);
  };

  deleteTask = i => {
    this.setState(
      prevState => {
        let tasks = prevState.tasks.slice();

        tasks.splice(i, 1);

        return { tasks: tasks };
      },
      () => Tasks.save(this.state.tasks)
    );
  };

  componentDidMount() {
    Tasks.all(tasks => this.setState({ tasks: tasks || [] }))
  }

  showDatePicker = async (options) => {
    try {
      const { action, year, month, day } = await DatePickerAndroid.open({
        date: new Date(),
        minDate: new Date(),
      });
      if (action !== DatePickerAndroid.dismissedAction) {
        let dateText = new Date(year, month, day);
        this.setState({ date: `${day}/${month + 1}/${year}` });
      }
    } catch ({ code, message }) {
      console.warn(`error `, code, message);
    }
  };

  render() {
    return (
      <View style={styles.container}>
        <Modal
          animationType="slide"
          transparent={false}
          visible={this.state.modalVisible}
          onRequestClose={() => {
            Alert.alert('Modal has been closed.');
          }}>
          <View style={{ marginTop: 40, backgroundColor: 'white' }}>
            <View>
              <Text style={styles.text}>Do by?</Text>
              <TouchableOpacity onPress={() => this.showDatePicker({ date: this.state.date })}>
                <View style={{ height: 40, borderColor: 'gray', borderWidth: 1, width: '95%', marginLeft: 10, marginBottom: 50 }}>
                  <Text style={{ fontSize: 16 }}>
                    {this.state.date}
                  </Text>
                </View>
              </TouchableOpacity>
              {/* <TextInput 
                onKeyPress={() => this.showDatePicker({ date: this.state.date })}
                value={this.state.date}
                keyboardType="numeric"
                maxLength={10}
                placeholder="Last Date"
              /> */}

              <Text style={styles.text}>Do what?</Text>
              <TextInput style={{ height: 40, borderColor: 'gray', borderWidth: 1, width: '95%', marginLeft: 10, marginBottom: 50 }}
                onChangeText={this.changeTextHandler}
                value={this.state.task}
                placeholder="Add Tasks"
              />
              <Button
                onPress={this.addTask}
                style={{ borderWidth: 1, height: 20, width: '40%', fontSize: 40 }}
                title="Save Details"
                color="green"
              />
            </View>
          </View>
        </Modal>
        <Text style={styles.header}>To-Do</Text>
        <Button
          onPress={() => {
            this.setModalVisible(true);
          }}
          style={{ borderWidth: 4, height: 20, width: '80%', fontSize: 50 }}
          title="+"
          color="#841584"
        />
        <FlatList
          style={styles.list}
          data={this.state.tasks}
          renderItem={({ item, index }) =>
            <View>
              <View style={styles.listItemCont}>
                <Text style={styles.listItem}>
                  {item.task}
                </Text>
                <Button title="X" onPress={() => this.deleteTask(index)} />
              </View>
              <View style={styles.hr} />
            </View>}
        />
      </View>
    );
  }
}
let Tasks = {
  all() {
    AsyncStorage.getItem("TASKS", (err, tasks) => {
      return tasks;
    });
  }
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 30,
    marginRight: 20,
    justifyContent: 'flex-start',
    alignItems: 'center'
  },
  text: {
    fontSize: 20,
    marginTop: 20,
    marginLeft: 10,
    color: 'black',
    justifyContent: 'center',
    alignItems: 'center'
  },
  header: {
    fontSize: 30,
    fontWeight: 'bold',
    top: 0,
    marginTop: 30,
    color: 'black',
  },
  list: {
    marginTop: 30,
    marginLeft: 20,
    width: "100%",
  },
  listItem: {
    paddingTop: 2,
    marginLeft: 5,
    paddingBottom: 2,
    fontSize: 18,
  },
  hr: {
    height: 1,
    backgroundColor: "white"
  },
  listItemCont: {
    flexDirection: "row",
    borderWidth: 2,
    alignItems: "center",
    marginBottom: 20,
    justifyContent: "space-between"
  },
});
