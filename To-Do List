import React, { Component } from 'react';
import { Modal, Text, View, Alert, StyleSheet, TextInput, Button, FlatList, AsyncStorage } from 'react-native';

//const isAndroid = Platform.OS == "android";

export default class ModalExample extends Component {
   state = {
      modalVisible: false,
      tasks: [],
      text: "",
      date: ""
   };

   setModalVisible(visible) {
      this.setState({ modalVisible: visible });
   }

   changeDateHandler = date => {
      this.setState({ date: date });
   };

   changeTextHandler = text => {
      this.setState({ text: text });
   };

   addTask = () => {
      let notEmptyDate = this.state.date.trim().length > 0;
      let notEmptyText = this.state.text.trim().length > 0;

      if (notEmptyDate || notEmptyText) {
         this.setState(
            prevState => {
               let { tasks, text, date } = prevState;
               return {
                  tasks: tasks.concat({ key: tasks.length, text: text, date: date }),
                  text: "",
                  date: ""
               };
            },
            () => Tasks.save(this.state.tasks)
         );
      }
      this.setModalVisible(!this.state.modalVisible);
   };

   componentDidMount() {
      Tasks.all(tasks => this.setState({ tasks: tasks || [] }))
   }
   render() {
      return (
         <View style={styles.container}>
            <Modal
               animationType="slide"
               transparent={false}
               visible={this.state.modalVisible}
               onRequestClose={() => {
                  Alert.alert('Modal has been closed.');
               }}>
               <View style={{ marginTop: 40, backgroundColor: 'white' }}>
                  <View>
                     <Text style={styles.text}>Do by?</Text>
                     <TextInput style={{ height: 40, borderColor: 'gray', borderWidth: 1, width: '95%', marginLeft: 10 }}
                        onChangeText={this.changeDateHandler}
                        value={this.state.date}
                        keyboardType="numeric"
                        maxLength={10}
                        placeholder="Last Date"
                     />
                     <Text style={styles.text}>Do what?</Text>
                     <TextInput style={{ height: 40, borderColor: 'gray', borderWidth: 1, width: '95%', marginLeft: 10, marginBottom: 50 }}
                        onChangeText={this.changeTextHandler}
                        value={this.state.text}
                        placeholder="Add Tasks"
                     />
                     <Button
                        onPress={this.addTask}
                        style={{ borderWidth: 1, height: 20, width: '40%', fontSize: 40 }}
                        title="Save Details"
                        color="green"
                     />
                  </View>
               </View>
            </Modal>
            <Text style={styles.header}>To-Do</Text>
            <Button
               onPress={() => {
                  this.setModalVisible(true);
               }}
               style={{ borderWidth: 1, height: 20, width: '80%', fontSize: 50 }}
               title="+"
               color="#841584"
            />
            <FlatList
               style={styles.list}
               data={this.state.tasks}
               renderItem={({ item, index }) =>
                  <View>
                     <View style={styles.listItemCont}>
                        <Text style={styles.listItem}>
                           {item.text}
                        </Text>
                        <Button title="X" onPress={() => this.deleteTask(index)} />
                     </View>
                     <View style={styles.hr} />
                  </View>}
            />
         </View>
      );
   }
}
let Tasks = {
   convertToArrayOfObject(tasks, callback) {
      return callback(
         tasks ? tasks.split("||").map((task, i) => ({ key: i, text: task })) : []
      );
   },
   convertToStringWithSeparators(tasks) {
      return tasks.map(task => task.text).join("||");
   },
   all(callback) {
      return AsyncStorage.getItem("TASKS", (err, tasks) =>
         this.convertToArrayOfObject(tasks, callback)
      );
   },
   save(tasks) {
      AsyncStorage.setItem("TASKS", this.convertToStringWithSeparators(tasks));
   }
};
const styles = StyleSheet.create({
   container: {
      flex: 1,
      marginTop: 30,
      marginRight: 20,
      justifyContent: 'flex-start',
      alignItems: 'center'
   },
   text: {
      fontSize: 20,
      marginTop: 20,
      marginLeft: 10,
      color: 'black',
      justifyContent: 'center',
      alignItems: 'center'
   },
   header: {
      fontSize: 30,
      fontWeight: 'bold',
      top: 0,
      marginTop: 30,
      color: 'black',
   },
   list: {
      marginTop: 30,
      width: "100%",
   },
   listItem: {
      paddingTop: 2,
      paddingBottom: 2,
      fontSize: 18,
   },
   hr: {
      height: 1,
      backgroundColor: "white"
   },
   listItemCont: {
      flexDirection: "row",
      borderWidth: 2,
      alignItems: "center",
      marginBottom: 20,
      justifyContent: "space-between"
   },
   // textInput: {
   //    height: 40,
   //    backgroundColor: 'steelblue',
   //    fontSize: 20,
   //    paddingRight: 10,
   //    paddingLeft: 10,
   //    borderColor: "black",
   //    borderWidth: isAndroid ? 0 : 1,
   //    width: "100%"
   // }
});
