import React, { Component } from 'react';
import {
  Modal,
  Text,
  View,
  Alert,
  StyleSheet,
  TextInput,
  Button,
  FlatList,
  AsyncStorage,
  TouchableOpacity,
  DatePickerAndroid,
} from 'react-native';
import {
  createStackNavigator,
  createAppContainer,
  StackActions,
  NavigationActions,
} from 'react-navigation';

class Home extends Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Text style={{ fontSize: 20, fontFamily: 'bold', marginBottom: 20 }}>
          Home Screen
        </Text>
        <Button
          style={{ fontSize: 20 }}
          title="Add Reminder"
          onPress={() => {
            this.props.navigation.dispatch(
              StackActions.reset({
                index: 0,
                actions: [NavigationActions.navigate({ routeName: 'Profile' })],
              })
            );
          }}
        />
        <Button
          style={{ fontSize: 20, marginTop: 20 }}
          title="Incoming Reminders"
          onPress={() => {
            this.props.navigation.dispatch(
              StackActions.reset({
                index: 0,
                actions: [NavigationActions.navigate({ routeName: 'List' })],
              })
            );
          }}
        />
      </View>
    );
  }
}

class List extends Component {
  constructor() {
    super();
    this.state = {
      tasks: [],
      task: '',
      date: '',
    };
  }
  render() {
    return (
      <View>
        <FlatList
          style={styles.list}
          data={this.state.tasks}
          renderItem={({ item, index }) => (
            <View
              style={{
                flexDirection: 'row',
                alignItems: 'center',
                width: '100%',
              }}>
              <View style={styles.listItemCont}>
                <Text style={styles.listItem}>Task: {item.task}</Text>
                <Text style={styles.listItem}>LastDate: {item.date}</Text>
              </View>
              <TouchableOpacity
                style={{ height: 20, width: 20, marginLeft: 5 }}
                onPress={() => this.checkViewMethod(item, index)}>
                {item.isSelected === true ? (
                  <View
                    style={{
                      height: 20,
                      width: 20,
                      backgroundColor: 'blue',
                      marginLeft: 5,
                    }}
                  />
                ) : (
                  <View
                    style={{
                      height: 20,
                      width: 20,
                      borderColor: 'black',
                      borderWidth: 3,
                      marginLeft: 5,
                    }}
                  />
                )}
              </TouchableOpacity>
              <View style={styles.hr} />
            </View>
          )}
          extraData={this.state}
          keyExtractor={index => index.toString()}
        />
        <View style={{ flexDirection: 'row' }}>
          <TouchableOpacity
            onPress={() => this.deleteAlert()}
            style={{
              height: 30,
              width: 80,
              borderColor: 'black',
              borderWidth: 2,
              marginRight: 15,
            }}>
            <View style={{ backgroundColor: 'red', height: 30, width: 76 }}>
              <Text
                style={{
                  fontSize: 18,
                  fontFamily: 'bold',
                  color: 'white',
                  marginTop: 3,
                  marginLeft: 10,
                }}>
                Delete
              </Text>
            </View>
          </TouchableOpacity>
          <TouchableOpacity
            style={{
              height: 30,
              width: 80,
              borderColor: 'black',
              borderWidth: 2,
              marginLeft: 15,
            }}
            onPress={() => this.checkAllMethod()}>
            <View style={{ backgroundColor: 'purple', height: 30, width: 76 }}>
              <Text
                style={{
                  fontSize: 18,
                  fontFamily: 'bold',
                  color: 'white',
                  marginTop: 3,
                  marginLeft: 10,
                }}>
                Select All
              </Text>
            </View>
          </TouchableOpacity>
        </View>
      </View>
    );
  }
}

class ToDoList extends Component {
  constructor(props) {
    super(props);
    this.state = {
      IsChecked: false,
      modalVisible: false,
      tasks: [],
      task: '',
      date: '',
      isSelected: false,
      checkView: false,
      url: '',
    };
  }
  changeURL = url => {
    this.setState({ url: url });
  };
  setModalVisible(visible) {
    this.setState({ modalVisible: visible });
  }

  changeTaskHandler = task => {
    this.setState({ task: task });
  };

  addTask = () => {
    let notEmptyDate = this.state.date.trim().length > 0;
    let notEmptyText = this.state.task.trim().length > 0;
    let isSelected = false;

    if (notEmptyDate && notEmptyText) {
      let tasks = this.state.tasks;
      tasks.unshift({
        task: this.state.task,
        date: this.state.date,
        isSelected: false,
      });
      this.state.task = '';
      this.state.date = '';
      this.setState({ tasks: tasks });
      this.setState({ isSelected: true });
      Tasks.save(this.state.tasks);
      Tasks.all(tasks => this.setState({ tasks: tasks || [] }));
    }
    this.setModalVisible(!this.state.modalVisible);
  };

  deleteTask = () => {
    let filteredData = this.state.tasks.filter(
      item => item.isSelected == false
    );
    this.setState({ tasks: filteredData });
    Tasks.save(this.state.tasks);
  };
  deleteAlert = () => {
    Alert.alert(
      'Are you sure?',
      'Do you want to delete this task?  ',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        { text: 'OK', onPress: () => this.deleteTask() },
      ],
      { cancelable: false }
    );
  };

  componentDidMount() {
    Tasks.all(tasks => this.setState({ tasks: tasks || [] }));
  }

  showDatePicker = async () => {
    try {
      const { action, year, month, day } = await DatePickerAndroid.open({
        date: new Date(),
      });
      if (action !== DatePickerAndroid.dismissedAction) {
        this.setState({ date: `${day}/${month + 1}/${year}` });
      }
    } catch ({ code, message }) {
      console.warn(`error `, code, message);
    }
  };

  checkViewMethod = (item, index) => {
    let tempArr = [...this.state.tasks]; //copying array
    tempArr[index].isSelected = !item.isSelected;
    this.setState({ tasks: tempArr });
    Tasks.save(this.state.tasks);
  };
  checkAllMethod = () => {
    let updateTask = this.state.tasks.map(item => {
      item.isSelected = !item.isSelected;
      return item;
    });
    this.setState({ tasks: updateTask });
    Tasks.save(this.state.tasks);
  };
  render() {
    console.log('checkView' + this.state.checkView);
    return (
      <View style={styles.container}>
        <Modal
          animationType="slide"
          transparent={false}
          visible={this.state.modalVisible}
          onRequestClose={() => {
            Alert.alert('Modal has been closed.');
          }}>
          <View style={{ marginTop: 40, backgroundColor: 'white' }}>
            <View>
              <Text style={styles.text}>Date</Text>
              <TouchableOpacity
                onPress={() => this.showDatePicker({ date: this.state.date })}>
                <View
                  style={{
                    height: 50,
                    borderColor: 'gray',
                    borderWidth: 1,
                    width: '95%',
                    marginLeft: 10,
                  }}>
                  <Text style={{ fontSize: 20, marginTop: 8 }}>
                    {this.state.date}
                  </Text>
                </View>
              </TouchableOpacity>

              <Text style={styles.text}>Subject</Text>
              <TextInput
                style={{
                  height: 50,
                  borderColor: 'gray',
                  borderWidth: 1,
                  width: '95%',
                  marginLeft: 10,
                  marginBottom: 50,
                  fontSize: 20,
                }}
                onChangeText={this.changeTaskHandler}
                value={this.state.task}
              />
              <Button
                onPress={this.addTask}
                style={{
                  borderWidth: 1,
                  height: 20,
                  width: '40%',
                  fontSize: 40,
                }}
                title="Save Reminder"
                color="green"
              />
            </View>
          </View>
        </Modal>
        {/* <Text style={styles.header}>To-Do</Text> */}
        <Button
          onPress={() => {
            this.setModalVisible(true);
          }}
          style={{ borderWidth: 1, height: 20, width: '80%', fontSize: 50 }}
          title="ADD REMINDER"
          color="#841584"
        />
        <FlatList
          style={styles.list}
          data={this.state.tasks}
          renderItem={({ item, index }) => (
            <View
              style={{
                flexDirection: 'row',
                alignItems: 'center',
                width: '100%',
              }}>
              <View style={styles.listItemCont}>
                <Text style={styles.listItem}>Task: {item.task}</Text>
                <Text style={styles.listItem}>LastDate: {item.date}</Text>
              </View>
              <TouchableOpacity
                style={{ height: 20, width: 20, marginLeft: 5 }}
                onPress={() => this.checkViewMethod(item, index)}>
                {item.isSelected === true ? (
                  <View
                    style={{
                      height: 20,
                      width: 20,
                      backgroundColor: 'blue',
                      marginLeft: 5,
                    }}
                  />
                ) : (
                  <View
                    style={{
                      height: 20,
                      width: 20,
                      borderColor: 'black',
                      borderWidth: 3,
                      marginLeft: 5,
                    }}
                  />
                )}
              </TouchableOpacity>
              <View style={styles.hr} />
            </View>
          )}
          extraData={this.state}
          keyExtractor={index => index.toString()}
        />

        <View style={{ flexDirection: 'row' }}>
          <TouchableOpacity
            onPress={() => this.deleteAlert()}
            style={{
              height: 30,
              width: 80,
              borderColor: 'black',
              borderWidth: 2,
              marginRight: 15,
            }}>
            <View style={{ backgroundColor: 'red', height: 30, width: 76 }}>
              <Text
                style={{
                  fontSize: 18,
                  fontFamily: 'bold',
                  color: 'white',
                  marginTop: 3,
                  marginLeft: 10,
                }}>
                Delete
              </Text>
            </View>
          </TouchableOpacity>
          <TouchableOpacity
            style={{
              height: 30,
              width: 80,
              borderColor: 'black',
              borderWidth: 2,
              marginLeft: 15,
            }}
            onPress={() => this.checkAllMethod()}>
            <View style={{ backgroundColor: 'purple', height: 30, width: 76 }}>
              <Text
                style={{
                  fontSize: 18,
                  fontFamily: 'bold',
                  color: 'white',
                  marginTop: 3,
                  marginLeft: 10,
                }}>
                Select All
              </Text>
            </View>
          </TouchableOpacity>
        </View>
      </View>
    );
  }
}
let Tasks = {
  all(callback) {
    AsyncStorage.getItem('TASKS', (err, tasks) => {
      return callback(JSON.parse(tasks));
    });
  },
  save(tasks) {
    AsyncStorage.setItem('TASKS', JSON.stringify(tasks));
  },
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 30,
    marginBottom: 10,
    marginRight: 20,
    justifyContent: 'flex-start',
    alignItems: 'center',
  },
  text: {
    fontSize: 20,
    marginTop: 20,
    marginLeft: 10,
    color: 'black',
    justifyContent: 'center',
    alignItems: 'center',
  },
  header: {
    fontSize: 30,
    fontWeight: 'bold',
    top: 0,
    marginTop: 30,
    color: 'black',
  },
  list: {
    marginTop: 30,
    marginLeft: 20,
    width: '100%',
  },
  listItem: {
    margin: 5,
    fontSize: 18,
  },
  hr: {
    height: 1,
    backgroundColor: 'black',
  },
  listItemCont: {
    width: '92%',
    flexDirection: 'column',
    borderWidth: 2,
    marginBottom: 20,
    justifyContent: 'space-between',
  },
});

const MainNavigator = createStackNavigator({
  Home: { screen: Home },
  Profile: { screen: ToDoList },
  List: { screen: List },
  initialRouteName: 'Home',
});

const Reminder = createAppContainer(MainNavigator);

export default Reminder;
