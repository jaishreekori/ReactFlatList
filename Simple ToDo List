import React, { Component } from 'react';
import { Modal, Text, View, Alert, StyleSheet, TextInput, Button, FlatList, AsyncStorage, TouchableOpacity, DatePickerAndroid } from 'react-native';

export default class App extends Component {
  state = {
    modalVisible: false,
    tasks: [],
    task: "",
    date: ""
  };

  setModalVisible(visible) {
    this.setState({ modalVisible: visible });
  }

  changeTaskHandler = task => {
    this.setState({ task: task });
  };

  addTask = () => {
    let notEmptyDate = this.state.date.trim().length > 0;
    let notEmptyText = this.state.task.trim().length > 0;

    if (notEmptyDate && notEmptyText) {
      let tasks = this.state.tasks;
      tasks.unshift({
        task: this.state.task,
        date: this.state.date,
      });
      this.state.date = '';
      this.state.task = '';
      this.setState({ tasks: tasks });
      Tasks.save(this.state.tasks);
      Tasks.all(tasks => this.setState({ tasks: tasks || [] }))
    }
    this.setModalVisible(!this.state.modalVisible);
  };

  deleteTask = i => {
    this.setState(
      prevState => {
        let tasks = prevState.tasks.slice();
        tasks.splice(i, 1);
        return { tasks: tasks };
      },
      () => Tasks.save(this.state.tasks)
    );
  };

  componentDidMount() {
    Tasks.all(tasks => this.setState({ tasks: tasks || [] }))
  }

  showDatePicker = async () => {
    try {
      const { action, year, month, day } = await DatePickerAndroid.open({
        date: new Date(),
      });
      if (action !== DatePickerAndroid.dismissedAction) {
        //let date = new Date(year, month, day);
        this.setState({ date: `${day}/${month + 1}/${year}` });
      }
    } catch ({ code, message }) {
      console.warn(`error `, code, message);
    }
  };

  render() {
    return (
      <View style={styles.container}>
        <Modal
          animationType="slide"
          transparent={false}
          visible={this.state.modalVisible}
          onRequestClose={() => {
            Alert.alert('Modal has been closed.');
          }}>
          <View style={{ marginTop: 40, backgroundColor: 'white' }}>
            <View>
              <Text style={styles.text}>Do by?</Text>
              <TouchableOpacity onPress={() => this.showDatePicker({ date: this.state.date })}>
                <View style={{ height: 40, borderColor: 'gray', borderWidth: 1, width: '95%', marginLeft: 10, }}>
                  <Text style={{ fontSize: 20, marginTop: 8 }}
                  >
                    {this.state.date}
                  </Text>
                </View>
              </TouchableOpacity>

              <Text style={styles.text}>Do what?</Text>
              <TextInput style={{ height: 40, borderColor: 'gray', borderWidth: 1, width: '95%', marginLeft: 10, marginBottom: 50, fontSize: 20 }}
                onChangeText={this.changeTaskHandler}
                value={this.state.task}
              />
              <Button
                onPress={this.addTask}
                style={{ borderWidth: 1, height: 20, width: '40%', fontSize: 40 }}
                title="Save Details"
                color="green"
              />
            </View>
          </View>
        </Modal>
        <Text style={styles.header}>To-Do</Text>
        <Button
          onPress={() => {
            this.setModalVisible(true);
          }}
          style={{ borderWidth: 1, height: 20, width: '80%', fontSize: 50 }}
          title="Add To-Do"
          color="#841584"
        />
        <FlatList
          style={styles.list}
          data={this.state.tasks}
          renderItem={({ index, item }) =>
            <View style={{ flexDirection: 'row', alignItems: 'center', width: "100%" }}>
              <View style={styles.listItemCont}>
                <Text style={styles.listItem}>
                  Task:  {item.task},
                </Text>
                <Text style={styles.listItem}>
                  LastDate:  {item.date}
                </Text>

              </View>
              <Button title="X" onPress={() => this.deleteTask(index)} />
              <View style={styles.hr} />
            </View>}
        />
      </View>
    );
  }
}
let Tasks = {
  convertToArrayOfObject(tasks, callback) {
    return callback(
      tasks ? tasks.split("||").map((task, lastDate, i) => ({ key: i, text: task, date: lastDate })) : []
    );
  },
  convertToStringWithSeparators(tasks) {
    return tasks.map(task => task.text, lastDate => lastDate.date).join("||");
  },
  all(callback) {
    AsyncStorage.getItem("TASKS", (err, tasks) => {
      return callback(JSON.parse(tasks));
    });
  },
  save(tasks) {
    AsyncStorage.setItem("TASKS", JSON.stringify(tasks));
  }
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 30,
    marginRight: 20,
    justifyContent: 'flex-start',
    alignItems: 'center'
  },
  text: {
    fontSize: 20,
    marginTop: 20,
    marginLeft: 10,
    color: 'black',
    justifyContent: 'center',
    alignItems: 'center'
  },
  header: {
    fontSize: 30,
    fontWeight: 'bold',
    top: 0,
    marginTop: 10,
    color: 'black',
  },
  list: {
    marginTop: 30,
    marginLeft: 20,
    width: "100%",
  },
  listItem: {
    margin: 5,
    fontSize: 18,
  },
  hr: {
    height: 1,
    backgroundColor: "white"
  },
  listItemCont: {
    width: "94%",
    flexDirection: "column",
    borderWidth: 2,
    marginBottom: 20,
    justifyContent: "space-between"
  },
});
